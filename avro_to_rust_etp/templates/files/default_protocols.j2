{%- include 'macro.j2' %}
{%- include 'partials/header.j2' %}

use std::time::{SystemTime};
use crate::energistics::etp::v12::datatypes::uuid::Uuid;
use crate::helpers::*;


{#- static ETP_SCHEMA_EMBED: [&str; {{ all_types | length }}] = [
{%- for schema in all_types %}
	r#"{{schema}}"#,
{%- endfor %}
];
 -#}
{% for file in protocols %}
{%- set nb_param = namespace(value=0) %}
{%- for name, field in file.fields.items() -%}
	{%- if macros.attrib_is_param(field) == "true" -%}
		{%- set nb_param.value = nb_param.value + 1 -%}
	{%- endif -%}
{%- endfor -%}

impl{% if nb_param.value == 0 %} Default for
{%- endif %} {{ macros.compute_ns_type_name(file.namespace, file.name) }} {

{%- block default_impl scoped %}
	/* Protocol {{file.schema.protocol}}, MessageType : {{file.schema.messageType}} */
	{% if nb_param.value > 0 -%}
	pub fn default_with_params
	{%- else -%}
	fn default
	{%- endif -%}
	(
	{%- for name, field in file.fields.items() -%}
		{%- if macros.attrib_is_param(field) == "true" -%}
			{{macros.compute_field_name_as_param(name)}} : 
		{%- if field.fieldtype == 'reference' -%}
			{{macros.compute_ns_type_name(field.reference_namespace , field.reference_name)}},
		{%- elif field.fieldtype == 'primitive' -%}
			{%- include 'fields/primitiveField.j2' -%},
		{%- endif -%}
		{%- endif -%}
	{%- endfor -%}
	)
	-> {{ macros.compute_ns_type_name(file.namespace, file.name) }} {
	{%- block default_function scoped %}
		{{ macros.compute_ns_type_name(file.namespace, file.name) }} {
		
		{%- block default_function_impl scoped -%}
			{%- for name, field in file.fields.items() %}
			{{ macros.compute_field_name(field.name) }} : {{compute_default(field)}},
			{%- endfor -%}
		{%- endblock default_function_impl %}
		}
	{%- endblock default_function %}
	}

{%- endblock default_impl %}
}

{% endfor -%}


pub fn get_message_schema(protocol: i32, message_type: i32) -> &'static str{
	match (protocol, message_type) {
{%- for file in protocols %}
{%- block protocol_match scoped %}
		({{file.schema.protocol}}, {{file.schema.messageType}}) => {{ compute_ns_file_name(file.namespace, file.name) }}::AVRO_SCHEMA,
{%- endblock protocol_match -%}
{% endfor %}
		_ => "",
	}
}