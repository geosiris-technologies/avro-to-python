{%- block enum %}

{{ macros.derive(None, true) }}
pub enum {{file.name}}{
/* {{file.default}} */
{%- block enumStruct %}
{%- if not file.default %}
    {#- #[default] -#}
{%- endif -%}
{%- for symbol in file.symbols %}
    {#  -#}
    {%- if symbol == file.default -%}
    {#- #[default] -#}
    {% endif -%}
    {%- if symbol|pascal_case|is_reserved -%}
    {{symbol|pascal_case ~ '_ '}}
    {%- else -%}
    {{symbol|pascal_case}}
    {%- endif -%}
    {%- if file.name == "Protocol" -%}
        ={{loop.index0}}
    {%- endif -%}
    ,
{%- endfor %}
{% endblock -%}
}

impl fmt::Display for {{file.name}}{
     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
            {%- for symbol in  file.symbols -%}
                {%- if symbol != file.default %}
                {#  #}
                {%- if symbol|pascal_case|is_reserved -%}
                {{file.name}}::{{symbol|pascal_case ~ '_ '}}
                {%- else -%}
                {{file.name}}::{{symbol|pascal_case ~ ' '}}
                {%- endif -%}
                => "{{symbol}}",
                {%- endif -%}
            {% endfor %}
            }
        )
    }
}

impl {{file.name}}{
    pub fn iter() -> Iter<'static, {{file.name}}> {
        static VEC_ENUM: [{{file.name}}; {{file.symbols | length}}] = [
        {%- for symbol in  file.symbols -%}
            {%- if symbol != file.default %}
            {#  #}
            {%- if symbol|pascal_case|is_reserved -%}
            {{file.name}}::{{symbol|pascal_case ~ '_ '}}
            {%- else -%}
            {{file.name}}::{{symbol|pascal_case ~ ' '}}
            {%- endif -%}, {#  -#}
            {%- endif -%}
        {% endfor -%}
        ];
        VEC_ENUM.iter()
    }
}
{% endblock -%}
