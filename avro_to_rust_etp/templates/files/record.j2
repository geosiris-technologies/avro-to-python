{%- block record -%}

{% set ns = namespace(optional=false) %}

{%- for name, field in file.fields.items() -%}
    {%- if field.fieldtype == 'array'-%}
        {%- if field.array_item_type.fieldtype == 'union' -%}
        // {{get_union_types(field.array_item_type, None).split(',')}}
        {%- endif -%}
    {%- elif field.fieldtype == 'union' -%}
        {%- if field.union_types|length > 1  -%}
#[derive(Debug, PartialEq, Clone, serde::Deserialize, serde::Serialize)]
#[serde(rename_all = "camelCase")]
pub enum {{get_union_types_enum_name(get_union_types(field, True, None))}}  {
    {# #}
            {%- for u_type in get_union_types(field, True, None).split(',') -%}
    {{ u_type | pascal_case }}({{primitive_type_map.get(u_type, u_type)}}),
    {# #}
            {%- endfor -%}
{# #}
}
{# #}
        {%- endif -%}
    {%- endif -%}
{%- endfor -%}

{# #}
#[derive(Debug, PartialEq, Clone, serde::Deserialize, serde::Serialize, Derivative)]
#[serde(rename_all = "camelCase")]
pub struct {{file.name}}{
{%- for name, field in file.fields.items() -%}
    {%- include 'fields/fieldFactory.j2' -%}
{%- endfor -%}
{% if file.name == 'AnyArray' %}
{% endif %}
}

pub static AVRO_SCHEMA: &'static str = {% include 'partials/avroSchema.j2' %};

{%- if macros.isEtpMessage() == "true" %}

impl EtpMessageBody for {{file.name}}{
    fn avro_schema() -> Option<Schema>{
        match Schema::parse_str(AVRO_SCHEMA) {
            Ok(result) => Some(result),
            Err(e) => {
                panic!("{:?}", e);
            }
        }
    }
{%- block a scoped %}
{%- for name, attr in file.schema.items() -%}
{%- if macros.isEtpMessageMeta(name) == "true" %}
    fn {{name|snake_case}}(&self) -> 
    {%- if attr | int | string == attr -%}
        i32
    {%- elif attr | snake_case == "true" or attr | snake_case == "false" -%}
        bool
    {%- else -%}
        String
    {%- endif -%}
    {
        {% block b scoped %}
            {%- if attr | int | string == attr -%}
            {{ attr }}
            {%- elif attr | snake_case == "true" or attr | snake_case == "false" -%}
            {{ attr | snake_case}}
            {%- else -%}
            "{{ attr }}".to_string()
            {%- endif %}
        {%- endblock b %}
    }
{%- endif %}
{%- endfor %}
}
{%- endblock a %}
{%- endif -%}
{%- endblock %}

{%- set nb_param = namespace(value=0) %}
{%- for name, field in file.fields.items() -%}
    {%- if macros.attrib_is_param(field) == "true" -%}
        {%- set nb_param.value = nb_param.value + 1 -%}
    {%- endif -%}
{%- endfor %}


{#- Generate default contructor with default value only if there are some default value for at least 1 param -#}


{%- if file.fields|length > nb_param.value %}

impl{% if nb_param.value == 0 %} Default for
{%- endif %} {{ file.name}} {#- {{ macros.compute_ns_type_name(file.namespace, file.name) }} -#} {

{%- block default_impl scoped %}
    /* Protocol {{file.schema.protocol}}, MessageType : {{file.schema.messageType}} */
    {% if nb_param.value > 0 -%}
    pub fn default_with_params
    {%- else -%}
    fn default
    {%- endif -%}
    (
    {%- for name, field in file.fields.items() -%}
        {%- if macros.attrib_is_param(field) == "true" -%}
            {{macros.compute_field_name_as_param(name)}}: {# -#}
        {%- if field.fieldtype == 'reference' -%}
            {{ field.reference_name }}, {# -#}
            {#- {{macros.compute_ns_type_name(field.reference_namespace , field.reference_name)}}, -#}
        {%- elif field.fieldtype == 'primitive' -%}
            {%- include 'fields/primitiveField.j2' -%}, {# -#}
        {%- elif field.fieldtype == 'union' -%}
            {%- include 'fields/unionField.j2' -%}, {# -#}
        {%- elif field.fieldtype == 'array' -%}
            {%- include 'fields/arrayField.j2' -%}, {# -#}
        {%- endif -%}
        {%- endif -%}
    {%- endfor -%}
    )
    -> {{ file.name }} {
    {%- block default_function scoped %}
        {{ file.name }} {
        
        {%- block default_function_impl scoped -%}
            {%- for name, field in file.fields.items() %}
            {{ macros.compute_field_name(field.name) }} : {# -#}
                {%- if macros.attrib_is_param(field) == "true" -%}
                    {{macros.compute_field_name_as_param(name)}},
                {%- else -%}
                    {{macros.compute_default(field)}},
                {%- endif -%}
            {%- endfor -%}
        {%- endblock default_function_impl %}
        }
    {%- endblock default_function %}
    }

{%- endblock default_impl %}
}
{%- endif -%}