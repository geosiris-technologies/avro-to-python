{%- block record -%}

{% set ns = namespace(optional=false) %}

{%- for name, field in file.fields.items() -%}
    {%- if field.fieldtype == 'array'-%}
        {%- if field.array_item_type.fieldtype == 'union' -%}
        // {{get_union_types(field.array_item_type, None).split(',')}}
        {%- endif -%}
    {%- elif field.fieldtype == 'union' -%}
        {%- if field.union_types|length > 1  -%}
#[derive(Debug, PartialEq, Clone, serde::Deserialize, serde::Serialize)]
#[serde(rename_all = "camelCase")]
pub enum {{get_union_types_enum_name(get_union_types(field, True, None))}}  {
    {# #}
            {%- for u_type in get_union_types(field, True, None).split(',') -%}
    {{ u_type | pascal_case }}({{primitive_type_map.get(u_type, u_type)}}),
    {# #}
            {%- endfor -%}
{# #}
}
{# #}
        {%- endif -%}
    {%- endif -%}
{%- endfor -%}

{# #}
#[derive(Debug, PartialEq, Clone, serde::Deserialize, serde::Serialize, Derivative)]
#[serde(rename_all = "camelCase")]
pub struct {{file.name}}{
{%- for name, field in file.fields.items() -%}
    {%- include 'fields/fieldFactory.j2' -%}
{%- endfor -%}
{% if file.name == 'AnyArray' %}
{% endif %}
}

pub static AVRO_SCHEMA: &'static str = {% include 'partials/avroSchema.j2' %};

{%- if isEtpMessage() == "true" %}

impl EtpMessageBody for {{file.name}}{
    fn avro_schema() -> Option<Schema>{
        match Schema::parse_str(AVRO_SCHEMA) {
            Ok(result) => Some(result),
            Err(e) => {
                panic!("{:?}", e);
            }
        }
    }
{%- block a scoped %}
{%- for name, attr in file.schema.items() -%}
{%- if isEtpMessageMeta(name) == "true" %}
    fn {{name|snake_case}}(&self) -> 
    {%- if attr | int | string == attr -%}
        i32
    {%- elif attr | snake_case == "true" or attr | snake_case == "false" -%}
        bool
    {%- else -%}
        String
    {%- endif -%}
    {
        {% block b scoped %}
            {%- if attr | int | string == attr -%}
            {{ attr }}
            {%- elif attr | snake_case == "true" or attr | snake_case == "false" -%}
            {{ attr | snake_case}}
            {%- else -%}
            "{{ attr }}".to_string()
            {%- endif %}
        {%- endblock b %}
    }
{%- endif %}
{%- endfor %}
}
{%- endblock a %}
{%- endif -%}
{%- endblock %}