{%- block record scoped %}

{%- set ns = namespace(optional=false) %}

{%- for name, field in file.fields.items() -%}
    {%- if field.fieldtype == 'array'-%}
        {%- if field.array_item_type.fieldtype == 'union' -%}
        // {{get_union_types(field.array_item_type, None).split(',')}}
        {%- endif -%}
    {%- elif field.fieldtype == 'union' -%}
        {%- if field.union_types|length > 1  -%}

{{ macros.derive(None, true) }}
pub enum {{get_union_types_enum_name(get_union_types(field, True, None))}}{# <'a> #} {
    {# -#}
    {%- for u_type in get_union_types(field, True, None).split(',') -%}
    {{ u_type | pascal_case }}({{primitive_type_map.get(u_type, u_type)}}),
    {#  -#}
    {%- endfor %}
}
{# #}
        {%- endif -%}
    {%- endif -%}
{%- endfor -%}

{# #}
{{ macros.derive(file.fields, false) }}
pub struct {{file.name}}{# <'a> #}{
{%- for name, field in file.fields.items() -%}
    {%- include 'fields/fieldFactory.j2' -%}
{%- endfor %}
}

fn {{file.name|lower}}_avro_schema() -> Option<Schema>{
    match Schema::parse_str(AVRO_SCHEMA) {
        Ok(result) => Some(result),
        Err(e) => {
            panic!("{:?}", e);
        }
    }
}

impl Schemable for {{file.name}} {
    fn avro_schema(&self) -> Option<Schema>{
        {{file.name|lower}}_avro_schema()
    }
    fn avro_schema_str(&self) ->  &'static str{
        AVRO_SCHEMA
    }
}

impl AvroSerializable for {{file.name}}{}

impl AvroDeserializable for {{file.name}}{
    fn avro_deserialize<R: Read>(input: &mut R) -> AvroResult<{{file.name}}> {
        let record = from_avro_datum(&{{file.name|lower}}_avro_schema().unwrap(), input, None).unwrap();
        from_value::<{{file.name}}>(&record)
    }
}

{%- if macros.isEtpMessage(file) == "true" %}

impl ETPMetadata for {{file.name}}{# <'_> #}{
{%- block a scoped %}
{%- for name, attr in file.schema.items() -%}
{%- if macros.isEtpMessageMeta(name) == "true" %}
    fn {{name|snake_case}}(&self) -> {#  -#}
    {%- if attr | int | string == attr -%}
        i32
    {%- elif attr | snake_case == "true" or attr | snake_case == "false" -%}
        bool
    {%- elif name.lower().endswith("role") or name.lower().endswith("roles") -%}
        Vec<Role>
    {%- else -%}
    /* {{attr.lower()}}*/
        String
    {%- endif -%}
    {
        {% block b scoped %}
        {%- if attr | int | string == attr -%}
            {{ attr }}
        {%- elif attr | snake_case == "true" or attr | snake_case == "false" -%}
            {{ attr | snake_case}}
        {%- elif name.lower().endswith("role") or name.lower().endswith("roles") -%}
            vec![
            {%- for a_role in attr.split(" ") -%}
                {%- for b_role in a_role.split(",") -%}
                    {%- if b_role == "*" -%}
                        Role::All, {#  -#}
                    {%- elif b_role | length > 1 -%}
                        Role::{{ b_role | pascal_case }}, {#  -#}
                    {%- endif -%}
                {%- endfor -%}
            {%- endfor -%}
            ]
        {%- else -%}
            "{{ attr }}"
        {%- endif %}
        {%- endblock b %}
    }
{%- endif %}
{%- endfor %}
}
{%- endblock a %}


impl{% if nb_param == 0 %} Default for {%- endif %} {{ file.name}}{
    pub fn as_protocol_message(&self) -> ProtocolMessage{
        ProtocolMessage::{{ macros.compute_protocolMessageName(file) }}(self.clone())
    } 
}

{%- endif -%}
{%- endblock record %}

{%- set nb_param = macros.count_attrib_is_param(file.fields) | int -%}

{#- Generate default contructor with default value only if there are some default value for at least 1 param -#}

{%- if file.fields|length > nb_param %}

impl{% if nb_param == 0 %} Default for
{%- endif %} {{ file.name}}{# <'_> #}{#- {{ macros.compute_ns_type_name(file.namespace, file.name) }} -#} {

{%- block default_impl scoped %}
    /* Protocol {{file.schema.protocol}}, MessageType : {{file.schema.messageType}} */
    {% if nb_param > 0 -%}
    pub fn default_with_params
    {%- else -%}
    fn default
    {%- endif -%}
    (
    {%- for name, field in file.fields.items() -%}
        {%- if macros.attrib_is_param(field) == "true" -%}
            {{ macros.compute_field_name(field.name) }}: {# -#}{#- {{macros.compute_field_name_as_param(name)}}:  -#}{#- -#}
        {%- if field.fieldtype == 'reference' -%}
            {{ field.reference_name }}, {# -#}
            {#- {{macros.compute_ns_type_name(field.reference_namespace , field.reference_name)}}, -#}
        {%- elif field.fieldtype == 'primitive' -%}
            {%- include 'fields/primitiveField.j2' -%}, {# -#}
        {%- elif field.fieldtype == 'union' -%}
            {%- include 'fields/unionField.j2' -%}, {# -#}
        {%- elif field.fieldtype == 'array' -%}
            {%- include 'fields/arrayField.j2' -%}, {# -#}
        {%- endif -%}
        {%- endif -%}
    {%- endfor -%}
    )
    -> {{ file.name }}{# <'static> #} {
    {%- block default_function scoped %}
        {{ file.name }} {
        
        {%- block default_function_impl scoped -%}
            {%- for name, field in file.fields.items() %}
            {{ macros.compute_field_name(field.name) }}
                {%- if macros.attrib_is_param(field) == "true" -%}
                    {#- {{macros.compute_field_name_as_param(name)}} -#},
                {%- else -%}
                    {#- #} : {{macros.compute_default(field)}},
                {%- endif -%}
            {%- endfor -%}
        {%- endblock default_function_impl %}
        }
    {%- endblock default_function %}
    }

{%- endblock default_impl %}
}
{%- endif %}

pub static AVRO_SCHEMA: &'static str = {% include 'partials/avroSchema.j2' %};